using System.Runtime.CompilerServices;

[assembly: InternalsVisibleTo("GodotAutoOnReady.Tests")]
namespace GodotAutoOnReady.SourceGenerator.Attributes;

internal static class GetNodeAttributeSource
{
    internal const string Name = "GetNodeAttribute";

    internal const string Source = """
    // <auto-generated />
    using System;

    #nullable disable

    namespace GodotAutoOnReady.Attributes
    {
        /// <summary>
        /// Initializes a property or a field in the _Ready method or a custom setup method
        /// when _Ready can't be auto-generated.
        /// </summary>
        [AttributeUsage(AttributeTargets.Property | AttributeTargets.Field, AllowMultiple = false, Inherited = false)]
        public sealed class GetNodeAttribute : Attribute
        {
            /// <value>
            /// Uses <c>GetNodeOrNull</c> instead of <c>GetNode</c> when assigning value to the property.
            /// </value>
            public bool OrNull { get; set; } = false;

            /// <value>
            /// Provides type name for <c>GetNodeOrNull</c>. Used only when Path contains colon characters that point to a node property
            /// e.g Player:Position:X and the field type is not the Node type.
            /// </value>
            public string NodeType { get; set; } = "";

            private string _path;

            /// <param name="path">Path to the node, when the path is empty a property name is used instead.</param>
            public GetNodeAttribute(string path = "")
            {
                _path = path;
            }
        }
    }
    """;
}
